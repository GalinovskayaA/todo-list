[{"D:\\it\\todolist-16\\src\\reportWebVitals.ts":"1","D:\\it\\todolist-16\\src\\utils\\error-utils.ts":"2","D:\\it\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"3","D:\\it\\todolist-16\\src\\app\\App.tsx":"4","D:\\it\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"5","D:\\it\\todolist-16\\src\\components\\EditableSpan\\EditableSpan.tsx":"6","D:\\it\\todolist-16\\src\\components\\AddItemForm\\AddItemForm.tsx":"7","D:\\it\\todolist-16\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"8","D:\\it\\todolist-16\\src\\app\\store.ts":"9","D:\\it\\todolist-16\\src\\features\\Login\\Login.tsx":"10","D:\\it\\todolist-16\\src\\api\\todolists-api.ts":"11","D:\\it\\todolist-16\\src\\features\\Login\\auth-reducer.tsx":"12","D:\\it\\todolist-16\\src\\features\\TodolistsList\\TodolistsList.tsx":"13","D:\\it\\todolist-16\\src\\app\\app-reducer.ts":"14"},{"size":425,"mtime":1619098762460,"results":"15","hashOfConfig":"16"},{"size":811,"mtime":1619098762748,"results":"17","hashOfConfig":"16"},{"size":1773,"mtime":1619098762731,"results":"18","hashOfConfig":"16"},{"size":2741,"mtime":1622286889277,"results":"19","hashOfConfig":"16"},{"size":4193,"mtime":1619098762707,"results":"20","hashOfConfig":"16"},{"size":952,"mtime":1619098762607,"results":"21","hashOfConfig":"16"},{"size":1595,"mtime":1619098762585,"results":"22","hashOfConfig":"16"},{"size":1092,"mtime":1619098762630,"results":"23","hashOfConfig":"16"},{"size":1182,"mtime":1619114352606,"results":"24","hashOfConfig":"16"},{"size":4214,"mtime":1622285817409,"results":"25","hashOfConfig":"16"},{"size":3096,"mtime":1619118341569,"results":"26","hashOfConfig":"16"},{"size":2487,"mtime":1619121372801,"results":"27","hashOfConfig":"16"},{"size":4142,"mtime":1619116834897,"results":"28","hashOfConfig":"16"},{"size":1700,"mtime":1619119054466,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1xkgmjc",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"32"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"D:\\it\\todolist-16\\src\\reportWebVitals.ts",[],["66","67"],"D:\\it\\todolist-16\\src\\utils\\error-utils.ts",[],"D:\\it\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["68","69","70"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\it\\todolist-16\\src\\app\\App.tsx",["71"],"D:\\it\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["72","73","74","75","76","77"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n",["78","79"],"D:\\it\\todolist-16\\src\\components\\EditableSpan\\EditableSpan.tsx",[],["80","81"],"D:\\it\\todolist-16\\src\\components\\AddItemForm\\AddItemForm.tsx",["82","83","84"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\it\\todolist-16\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"D:\\it\\todolist-16\\src\\app\\store.ts",[],["85","86"],"D:\\it\\todolist-16\\src\\features\\Login\\Login.tsx",["87"],"D:\\it\\todolist-16\\src\\api\\todolists-api.ts",[],"D:\\it\\todolist-16\\src\\features\\Login\\auth-reducer.tsx",[],"D:\\it\\todolist-16\\src\\features\\TodolistsList\\TodolistsList.tsx",["88","89","90","91","92","93","94","95"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) { // проверка залогинены или нет, чтоб не слать запрос на сервер\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","D:\\it\\todolist-16\\src\\app\\app-reducer.ts",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":15,"column":97,"nodeType":"102","endLine":15,"endColumn":130,"suggestions":"103"},{"ruleId":"100","severity":1,"message":"101","line":20,"column":8,"nodeType":"102","endLine":20,"endColumn":41,"suggestions":"104"},{"ruleId":"100","severity":1,"message":"101","line":24,"column":8,"nodeType":"102","endLine":24,"endColumn":41,"suggestions":"105"},{"ruleId":"100","severity":1,"message":"106","line":35,"column":8,"nodeType":"102","endLine":35,"endColumn":10,"suggestions":"107"},{"ruleId":"100","severity":1,"message":"108","line":35,"column":8,"nodeType":"102","endLine":35,"endColumn":10,"suggestions":"109"},{"ruleId":"100","severity":1,"message":"101","line":39,"column":8,"nodeType":"102","endLine":39,"endColumn":42,"suggestions":"110"},{"ruleId":"100","severity":1,"message":"101","line":46,"column":8,"nodeType":"102","endLine":46,"endColumn":54,"suggestions":"111"},{"ruleId":"100","severity":1,"message":"101","line":48,"column":95,"nodeType":"102","endLine":48,"endColumn":134,"suggestions":"112"},{"ruleId":"100","severity":1,"message":"101","line":49,"column":101,"nodeType":"102","endLine":49,"endColumn":140,"suggestions":"113"},{"ruleId":"100","severity":1,"message":"101","line":50,"column":107,"nodeType":"102","endLine":50,"endColumn":146,"suggestions":"114"},{"ruleId":"96","replacedBy":"115"},{"ruleId":"98","replacedBy":"116"},{"ruleId":"96","replacedBy":"117"},{"ruleId":"98","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":2,"column":9,"nodeType":"121","messageId":"122","endLine":2,"endColumn":12},{"ruleId":"119","severity":1,"message":"123","line":2,"column":14,"nodeType":"121","messageId":"122","endLine":2,"endColumn":20},{"ruleId":"119","severity":1,"message":"124","line":2,"column":22,"nodeType":"121","messageId":"122","endLine":2,"endColumn":33},{"ruleId":"96","replacedBy":"125"},{"ruleId":"98","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":56,"column":28,"nodeType":"129","endLine":56,"endColumn":45},{"ruleId":"100","severity":1,"message":"130","line":36,"column":8,"nodeType":"102","endLine":36,"endColumn":10,"suggestions":"131"},{"ruleId":"100","severity":1,"message":"132","line":41,"column":8,"nodeType":"102","endLine":41,"endColumn":10,"suggestions":"133"},{"ruleId":"100","severity":1,"message":"132","line":46,"column":8,"nodeType":"102","endLine":46,"endColumn":10,"suggestions":"134"},{"ruleId":"100","severity":1,"message":"132","line":51,"column":8,"nodeType":"102","endLine":51,"endColumn":10,"suggestions":"135"},{"ruleId":"100","severity":1,"message":"132","line":56,"column":8,"nodeType":"102","endLine":56,"endColumn":10,"suggestions":"136"},{"ruleId":"100","severity":1,"message":"132","line":61,"column":8,"nodeType":"102","endLine":61,"endColumn":10,"suggestions":"137"},{"ruleId":"100","severity":1,"message":"132","line":66,"column":8,"nodeType":"102","endLine":66,"endColumn":10,"suggestions":"138"},{"ruleId":"100","severity":1,"message":"132","line":71,"column":8,"nodeType":"102","endLine":71,"endColumn":10,"suggestions":"139"},"no-native-reassign",["140"],"no-negated-in-lhs",["141"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["142"],["143"],["144"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["145"],"React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.",["146"],["147"],["148"],["149"],["150"],["151"],["140"],["141"],["140"],["141"],"@typescript-eslint/no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'FormControl' is defined but never used.",["140"],["141"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.",["152"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["153"],["154"],["155"],["156"],["157"],["158"],["159"],"no-global-assign","no-unsafe-negation",{"desc":"160","fix":"161"},{"desc":"160","fix":"162"},{"desc":"160","fix":"163"},{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"160","fix":"168"},{"desc":"160","fix":"169"},{"desc":"160","fix":"170"},{"desc":"160","fix":"171"},{"desc":"160","fix":"172"},{"desc":"173","fix":"174"},{"desc":"164","fix":"175"},{"desc":"164","fix":"176"},{"desc":"164","fix":"177"},{"desc":"164","fix":"178"},{"desc":"164","fix":"179"},{"desc":"164","fix":"180"},{"desc":"164","fix":"181"},"Update the dependencies array to be: [props]",{"range":"182","text":"183"},{"range":"184","text":"183"},{"range":"185","text":"183"},"Update the dependencies array to be: [dispatch]",{"range":"186","text":"187"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"188","text":"189"},{"range":"190","text":"183"},{"range":"191","text":"183"},{"range":"192","text":"183"},{"range":"193","text":"183"},{"range":"194","text":"183"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"195","text":"196"},{"range":"197","text":"187"},{"range":"198","text":"187"},{"range":"199","text":"187"},{"range":"200","text":"187"},{"range":"201","text":"187"},{"range":"202","text":"187"},{"range":"203","text":"187"},[765,798],"[props]",[1071,1104],[1261,1294],[1242,1244],"[dispatch]",[1464,1466],"[demo, dispatch, props.todolist.id]",[1581,1615],[1846,1892],[1991,2030],[2133,2172],[2281,2320],[1389,1391],"[demo, dispatch, isLoggedIn]",[1560,1562],[1731,1733],[1936,1938],[2149,2151],[2350,2352],[2497,2499],[2676,2678]]